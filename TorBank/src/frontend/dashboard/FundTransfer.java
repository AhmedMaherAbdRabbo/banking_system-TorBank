/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.dashboard;


import backend.connections.DatabaseConnections;
import java.math.BigDecimal;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

// مكتبات SQL للتعامل مع قاعدة البيانات
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// لو بتستخدم أنواع بيانات إضافية
import java.sql.Statement;
import backend.controllers.UserController;
import java.util.HashMap;
import java.util.Map;
/**
 *
 * @author DELL
 */
public class FundTransfer extends javax.swing.JPanel {

    /**
     * Creates new form FundTransfer
     */
    public FundTransfer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fromAccountField = new javax.swing.JTextField();
        transferAmount = new javax.swing.JTextField();
        transferAmountField = new javax.swing.JTextField();
        FundTransfer = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(204, 204, 0));

        jLabel1.setText("from");

        jLabel2.setText("to");

        jLabel3.setText("transferAmount");

        fromAccountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromAccountFieldActionPerformed(evt);
            }
        });

        FundTransfer.setBackground(new java.awt.Color(197, 193, 187));
        FundTransfer.setText("Fund transfer");
        FundTransfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FundTransferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transferAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transferAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromAccountField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(391, Short.MAX_VALUE)
                .addComponent(FundTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(169, 169, 169))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabel1)
                .addGap(43, 43, 43)
                .addComponent(fromAccountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(transferAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addGap(40, 40, 40)
                .addComponent(transferAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(FundTransfer, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void FundTransferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FundTransferActionPerformed
    // Get transfer details from UI
    long fromAccount = Long.parseLong(fromAccountField.getText());
    long toAccount = Long.parseLong(transferAmountField.getText());
    double transferAmount = Double.parseDouble(transferAmountField.getText());

    // Validate basic input
    if (transferAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Transfer amount must be greater than zero.");
        return;
    }

    if (fromAccount == toAccount) {
        JOptionPane.showMessageDialog(null, "Cannot transfer to the same account.");
        return;
    }

    try (Connection conn = DatabaseConnections.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(null, "Failed to connect to the database");
            return;
        }

        // Start transaction
        conn.setAutoCommit(false);

        try {
            // 1. Verify both accounts exist and lock them
            String sqlCheckAccounts = "SELECT account_number, balance FROM accounts " +
                                    "WHERE account_number IN (?, ?) FOR UPDATE";
            PreparedStatement stmtCheck = conn.prepareStatement(sqlCheckAccounts);
            stmtCheck.setLong(1, fromAccount);
            stmtCheck.setLong(2, toAccount);
            ResultSet rs = stmtCheck.executeQuery();

            Map<Long, Double> accountBalances = new HashMap<>();
            while (rs.next()) {
                accountBalances.put(rs.getLong("account_number"), rs.getDouble("balance"));
            }

            if (!accountBalances.containsKey(fromAccount)) {
                JOptionPane.showMessageDialog(null, "Source account not found.");
                return;
            }

            if (!accountBalances.containsKey(toAccount)) {
                JOptionPane.showMessageDialog(null, "Destination account not found.");
                return;
            }

            // 2. Check sufficient funds in source account
            if (accountBalances.get(fromAccount) < transferAmount) {
                JOptionPane.showMessageDialog(null, "Insufficient funds for transfer.");
                return;
            }

            // 3. Update both accounts
            // Deduct from source account
            String sqlUpdateFrom = "UPDATE accounts SET balance = balance - ? WHERE account_number = ?";
            PreparedStatement stmtUpdateFrom = conn.prepareStatement(sqlUpdateFrom);
            stmtUpdateFrom.setDouble(1, transferAmount);
            stmtUpdateFrom.setLong(2, fromAccount);
            int fromUpdated = stmtUpdateFrom.executeUpdate();

            // Add to destination account
            String sqlUpdateTo = "UPDATE accounts SET balance = balance + ? WHERE account_number = ?";
            PreparedStatement stmtUpdateTo = conn.prepareStatement(sqlUpdateTo);
            stmtUpdateTo.setDouble(1, transferAmount);
            stmtUpdateTo.setLong(2, toAccount);
            int toUpdated = stmtUpdateTo.executeUpdate();

            if (fromUpdated == 0 || toUpdated == 0) {
                conn.rollback();
                JOptionPane.showMessageDialog(null, "Failed to update accounts.");
                return;
            }

            // 4. Record transaction
            int userId = UserController.getUserId();
            if (userId <= 0) {
                conn.rollback();
                JOptionPane.showMessageDialog(null, "No valid user session. Please login again.");
                return;
            }

            String sqlTransaction = "INSERT INTO transactions " +
                                  "(from_account, to_account, amount, transaction_type, user_id) " +
                                  "VALUES (?, ?, ?, ?, ?)";
            PreparedStatement stmtTransaction = conn.prepareStatement(sqlTransaction);
            stmtTransaction.setLong(1, fromAccount);
            stmtTransaction.setLong(2, toAccount);
            stmtTransaction.setDouble(3, transferAmount);
            stmtTransaction.setString(4, "Transfer");
            stmtTransaction.setInt(5, userId);

            int rowsInserted = stmtTransaction.executeUpdate();

            if (rowsInserted > 0) {
                conn.commit();
                JOptionPane.showMessageDialog(null, 
                    "Transfer successful! $" + transferAmount + " transferred from account " + 
                    fromAccount + " to account " + toAccount);
            } else {
                conn.rollback();
                JOptionPane.showMessageDialog(null, "Failed to record transaction.");
            }
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    }
    }//GEN-LAST:event_FundTransferActionPerformed

    private void fromAccountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromAccountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromAccountFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FundTransfer;
    private javax.swing.JTextField fromAccountField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField transferAmount;
    private javax.swing.JTextField transferAmountField;
    // End of variables declaration//GEN-END:variables
}
