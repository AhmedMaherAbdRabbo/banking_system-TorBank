/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.dashboard;

import backend.connections.DatabaseConnections;
import java.math.BigDecimal;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

// مكتبات SQL للتعامل مع قاعدة البيانات
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// لو بتستخدم أنواع بيانات إضافية
import java.sql.Statement;
import backend.controllers.UserController;


/**
 *
 * @author DELL
 */
public class Withdraw extends javax.swing.JPanel {

    /**
     * Creates new form Withdraw
     */
    public Withdraw() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Withdraw = new javax.swing.JButton();
        accountNumber = new javax.swing.JTextField();
        withdrawAmount = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(153, 102, 255));

        jLabel1.setText("accountNumber");

        jLabel2.setText("withdraw Amount");

        Withdraw.setBackground(new java.awt.Color(197, 193, 187));
        Withdraw.setText("Withdraw");
        Withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Withdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(accountNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(withdrawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(226, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(accountNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(withdrawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(Withdraw, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void WithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawActionPerformed

        // Get account number and withdrawal amount
    long accountNum = Long.parseLong(accountNumber.getText());
    double withdrawAmt = Double.parseDouble(withdrawAmount.getText());

    // Validate amount is positive
    if (withdrawAmt <= 0) {
        JOptionPane.showMessageDialog(null, "Withdrawal amount must be greater than zero.");
        return;
    }

    try (Connection conn = DatabaseConnections.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(null, "Failed to connect to the database");
            return;
        }

        // Start transaction
        conn.setAutoCommit(false);

        try {
            // 1. Check current balance
            String sqlBalance = "SELECT balance FROM accounts WHERE account_number = ? FOR UPDATE";
            PreparedStatement stmtBalance = conn.prepareStatement(sqlBalance);
            stmtBalance.setLong(1, accountNum);
            ResultSet rs = stmtBalance.executeQuery();

            if (!rs.next()) {
                JOptionPane.showMessageDialog(null, "Account not found.");
                return;
            }

            double currentBalance = rs.getDouble("balance");
            
            // 2. Validate sufficient funds
            if (currentBalance < withdrawAmt) {
                JOptionPane.showMessageDialog(null, "Insufficient funds for withdrawal.");
                return;
            }

            double newBalance = currentBalance - withdrawAmt;

            // 3. Update account balance
            String sqlUpdate = "UPDATE accounts SET balance = ? WHERE account_number = ?";
            PreparedStatement stmtUpdate = conn.prepareStatement(sqlUpdate);
            stmtUpdate.setDouble(1, newBalance);
            stmtUpdate.setLong(2, accountNum);
            int rowsUpdated = stmtUpdate.executeUpdate();

            if (rowsUpdated == 0) {
                JOptionPane.showMessageDialog(null, "Failed to update account balance.");
                return;
            }

            // 4. Record transaction
            int userId = UserController.getUserId();
            if (userId <= 0) {
                JOptionPane.showMessageDialog(null, "No valid user session. Please login again.");
                return;
            }

            String sqlTransaction = "INSERT INTO transactions (from_account, to_account, amount, transaction_type, user_id) " +
                                   "VALUES (?, ?, ?, ?, ?)";
            PreparedStatement stmtTransaction = conn.prepareStatement(sqlTransaction);
            stmtTransaction.setLong(1, accountNum);  // Money is coming from this account
            stmtTransaction.setLong(2, accountNum);  // For withdrawals, to_account is same
            stmtTransaction.setDouble(3, withdrawAmt);
            stmtTransaction.setString(4, "Withdraw");
            stmtTransaction.setInt(5, userId);

            int rowsInserted = stmtTransaction.executeUpdate();

            if (rowsInserted > 0) {
                conn.commit();  // Commit transaction if all operations succeeded
                JOptionPane.showMessageDialog(null, 
                    "Withdrawal successful! New Balance: " + newBalance);
            } else {
                conn.rollback();
                JOptionPane.showMessageDialog(null, "Failed to record transaction.");
            }
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    }
    }//GEN-LAST:event_WithdrawActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Withdraw;
    private javax.swing.JTextField accountNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField withdrawAmount;
    // End of variables declaration//GEN-END:variables
}
