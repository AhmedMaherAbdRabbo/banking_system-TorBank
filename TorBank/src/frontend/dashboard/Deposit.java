/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend.dashboard;

// مكتبات Swing لواجهة المستخدم
import backend.connections.DatabaseConnections;
import java.math.BigDecimal;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

// مكتبات SQL للتعامل مع قاعدة البيانات
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

// لو بتستخدم أنواع بيانات إضافية
import java.sql.Statement;


/**
 *
 * @author DELL
 */
public class Deposit extends javax.swing.JPanel {

    /**
     * Creates new form Deposit
     */
    public Deposit() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        accountNumber = new javax.swing.JTextField();
        depositAmount = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Deposit = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        depositAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositAmountActionPerformed(evt);
            }
        });

        jLabel1.setText("accountNumber");

        jLabel2.setText("deposit amount");

        Deposit.setBackground(new java.awt.Color(197, 193, 187));
        Deposit.setText("Deposit");
        Deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(depositAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(accountNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(289, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(accountNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addGap(48, 48, 48)
                .addComponent(depositAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(Deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void depositAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositAmountActionPerformed

    private void DepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositActionPerformed

        // الحصول على رقم الحساب والمبلغ للإيداع
    long accountNum = Long.parseLong(accountNumber.getText());
    double depositAmt = Double.parseDouble(depositAmount.getText());

    // التحقق من أن المبلغ أكبر من الصفر
    if (depositAmt <= 0) {
        JOptionPane.showMessageDialog(null, "Amount to deposit should be greater than zero.");
        return;
    }

    // فتح الاتصال بقاعدة البيانات
    try (Connection conn = DatabaseConnections.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(null, "Failed to connect to the database");
            return;
        }

        // استعلام للتحقق من الرصيد الحالي في الحساب
        String sqlBalance = "SELECT balance FROM accounts WHERE account_number = ?";
        PreparedStatement stmtBalance = conn.prepareStatement(sqlBalance);
        stmtBalance.setLong(1, accountNum);
        ResultSet rs = stmtBalance.executeQuery();

        // إذا لم يتم العثور على الحساب، إظهار رسالة خطأ
        if (!rs.next()) {
            JOptionPane.showMessageDialog(null, "Account not found.");
            return;
        }

        // الحصول على الرصيد الحالي
        double currentBalance = rs.getDouble("balance");
        double newBalance = currentBalance + depositAmt;

        // استعلام لتحديث الرصيد في الحساب
        String sqlUpdateBalance = "UPDATE accounts SET balance = ? WHERE account_number = ?";
        PreparedStatement stmtUpdateBalance = conn.prepareStatement(sqlUpdateBalance);
        stmtUpdateBalance.setDouble(1, newBalance);
        stmtUpdateBalance.setLong(2, accountNum);
        int rowsUpdated = stmtUpdateBalance.executeUpdate();

        // إذا تم تحديث الرصيد بنجاح، إضافة المعاملة
        if (rowsUpdated > 0) {
            // الحصول على user_id من UserController
            int userId = backend.controllers.UserController.getUserId();

            // استعلام لإدخال المعاملة في جدول المعاملات
            String sqlTransaction = "INSERT INTO transactions (from_account, to_account, amount, transaction_type, user_id) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement stmtTransaction = conn.prepareStatement(sqlTransaction);
            stmtTransaction.setLong(1, accountNum);  // الحساب المصدر (من نفس الحساب للإيداع)
            stmtTransaction.setLong(2, accountNum);  // الحساب الهدف (من نفس الحساب للإيداع)
            stmtTransaction.setDouble(3, depositAmt);  // المبلغ
            stmtTransaction.setString(4, "Deposit");  // نوع المعاملة (إيداع)
            stmtTransaction.setInt(5, userId);  // user_id من UserController

            int rowsInserted = stmtTransaction.executeUpdate();

            // إذا تم إدخال المعاملة بنجاح
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(null, "Deposit successful! New Balance: " + newBalance);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to record transaction.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Failed to update balance.");
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
    }

    }//GEN-LAST:event_DepositActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Deposit;
    private javax.swing.JTextField accountNumber;
    private javax.swing.JTextField depositAmount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
